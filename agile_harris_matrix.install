<?php

/**
 * @file
 * Installs this module.
 */

/**
 * Returns definition of content type.
 *
 * @return array
 */
function _agile_harris_matrix_get_data() {
  return array(
    'bundles' => array(
      'harris_matrix' => (object) array(
        'type' => 'harris_matrix',
        'name' => 'Harris Matrix',
        'base' => 'node_content',
        'module' => 'node',
        'description' => '',
        'help' => '',
        'has_title' => '1',
        'title_label' => 'Title',
        'custom' => '1',
        'modified' => '1',
        'locked' => '0',
        'disabled' => '0',
        'orig_type' => 'new_harris',
        'disabled_changed' => FALSE,
        'bc_entity_type' => 'node',
      ),
    ),
    'fields' => array(
      'field_hmc' => array(
        'translatable' => '0',
        'entity_types' => array(),
        'settings' => array(
          'display_field' => 0,
          'display_default' => 0,
          'uri_scheme' => 'public',
        ),
        'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
          'module' => 'field_sql_storage',
          'active' => '1',
          'details' => array(
            'sql' => array(
              'FIELD_LOAD_CURRENT' => array(
                'field_data_field_hmc' => array(
                  'fid' => 'field_hmc_fid',
                  'display' => 'field_hmc_display',
                  'description' => 'field_hmc_description',
                ),
              ),
              'FIELD_LOAD_REVISION' => array(
                'field_revision_field_hmc' => array(
                  'fid' => 'field_hmc_fid',
                  'display' => 'field_hmc_display',
                  'description' => 'field_hmc_description',
                ),
              ),
            ),
          ),
        ),
        'foreign keys' => array(
          'fid' => array(
            'table' => 'file_managed',
            'columns' => array(
              'fid' => 'fid',
            ),
          ),
        ),
        'indexes' => array(
          'fid' => array(
            0 => 'fid',
          ),
        ),
        'field_name' => 'field_hmc',
        'type' => 'file',
        'module' => 'file',
        'active' => '1',
        'locked' => '0',
        'cardinality' => '1',
        'deleted' => '0',
        'columns' => array(
          'fid' => array(
            'description' => 'The {file_managed}.fid being referenced in this field.',
            'type' => 'int',
            'not null' => FALSE,
            'unsigned' => TRUE,
          ),
          'display' => array(
            'description' => 'Flag to control whether this file should be displayed when viewing content.',
            'type' => 'int',
            'size' => 'tiny',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 1,
          ),
          'description' => array(
            'description' => 'A description of the file.',
            'type' => 'text',
            'not null' => FALSE,
          ),
        ),
        'bundles' => array(
          'node' => array(
            0 => 'harris_matrix',
          ),
        ),
      ),
      'field_json' => array(
        'translatable' => '0',
        'entity_types' => array(),
        'settings' => array(
          'display_field' => 0,
          'display_default' => 0,
          'uri_scheme' => 'public',
        ),
        'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
          'module' => 'field_sql_storage',
          'active' => '1',
          'details' => array(
            'sql' => array(
              'FIELD_LOAD_CURRENT' => array(
                'field_data_field_json' => array(
                  'fid' => 'field_json_fid',
                  'display' => 'field_json_display',
                  'description' => 'field_json_description',
                ),
              ),
              'FIELD_LOAD_REVISION' => array(
                'field_revision_field_json' => array(
                  'fid' => 'field_json_fid',
                  'display' => 'field_json_display',
                  'description' => 'field_json_description',
                ),
              ),
            ),
          ),
        ),
        'foreign keys' => array(
          'fid' => array(
            'table' => 'file_managed',
            'columns' => array(
              'fid' => 'fid',
            ),
          ),
        ),
        'indexes' => array(
          'fid' => array(
            0 => 'fid',
          ),
        ),
        'field_name' => 'field_json',
        'type' => 'file',
        'module' => 'file',
        'active' => '1',
        'locked' => '0',
        'cardinality' => '1',
        'deleted' => '0',
        'columns' => array(
          'fid' => array(
            'description' => 'The {file_managed}.fid being referenced in this field.',
            'type' => 'int',
            'not null' => FALSE,
            'unsigned' => TRUE,
          ),
          'display' => array(
            'description' => 'Flag to control whether this file should be displayed when viewing content.',
            'type' => 'int',
            'size' => 'tiny',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 1,
          ),
          'description' => array(
            'description' => 'A description of the file.',
            'type' => 'text',
            'not null' => FALSE,
          ),
        ),
        'bundles' => array(
          'node' => array(
            0 => 'harris_matrix',
          ),
        ),
      ),
      'field_taxonomy' => array(
        'translatable' => '0',
        'entity_types' => array(),
        'settings' => array(
          'allowed_values' => array(
            0 => array(
              'vocabulary' => 'matrix_vocabularies',
              'parent' => '0',
            ),
          ),
        ),
        'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
          'module' => 'field_sql_storage',
          'active' => '1',
          'details' => array(
            'sql' => array(
              'FIELD_LOAD_CURRENT' => array(
                'field_data_field_taxonomy' => array(
                  'tid' => 'field_taxonomy_tid',
                ),
              ),
              'FIELD_LOAD_REVISION' => array(
                'field_revision_field_taxonomy' => array(
                  'tid' => 'field_taxonomy_tid',
                ),
              ),
            ),
          ),
        ),
        'foreign keys' => array(
          'tid' => array(
            'table' => 'taxonomy_term_data',
            'columns' => array(
              'tid' => 'tid',
            ),
          ),
        ),
        'indexes' => array(
          'tid' => array(
            0 => 'tid',
          ),
        ),
        'field_name' => 'field_taxonomy',
        'type' => 'taxonomy_term_reference',
        'module' => 'taxonomy',
        'active' => '1',
        'locked' => '0',
        'cardinality' => '1',
        'deleted' => '0',
        'columns' => array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => FALSE,
          ),
        ),
        'bundles' => array(
          'node' => array(
            0 => 'harris_matrix',
          ),
        ),
      ),
    ),
    'instances' => array(
      'field_hmc' => array(
        0 => array(
          'label' => 'HMC',
          'widget' => array(
            'weight' => '31',
            'type' => 'file_generic',
            'module' => 'file',
            'active' => 1,
            'settings' => array(
              'progress_indicator' => 'throbber',
            ),
          ),
          'settings' => array(
            'file_directory' => '',
            'file_extensions' => 'xml',
            'max_filesize' => '',
            'description_field' => 0,
            'user_register_form' => FALSE,
          ),
          'display' => array(
            'default' => array(
              'label' => 'above',
              'type' => 'file_default',
              'weight' => '0',
              'settings' => array(),
              'module' => 'file',
            ),
            'teaser' => array(
              'type' => 'hidden',
              'label' => 'above',
              'settings' => array(),
              'weight' => 0,
            ),
          ),
          'required' => 0,
          'description' => '',
          'field_name' => 'field_hmc',
          'entity_type' => 'node',
          'bundle' => 'harris_matrix',
          'deleted' => '0',
        ),
      ),
      'field_json' => array(
        0 => array(
          'label' => 'JSON',
          'widget' => array(
            'weight' => '32',
            'type' => 'file_generic',
            'module' => 'file',
            'active' => 1,
            'settings' => array(
              'progress_indicator' => 'throbber',
            ),
          ),
          'settings' => array(
            'file_directory' => '',
            'file_extensions' => 'txt',
            'max_filesize' => '',
            'description_field' => 0,
            'user_register_form' => FALSE,
          ),
          'display' => array(
            'default' => array(
              'label' => 'above',
              'type' => 'hidden',
              'weight' => '1',
              'settings' => array(),
            ),
            'teaser' => array(
              'type' => 'hidden',
              'label' => 'above',
              'settings' => array(),
              'weight' => 0,
            ),
          ),
          'required' => 0,
          'description' => '',
          'field_name' => 'field_json',
          'entity_type' => 'node',
          'bundle' => 'harris_matrix',
          'deleted' => '0',
        ),
      ),
      'field_taxonomy' => array(
        0 => array(
          'label' => 'Taxonomy',
          'widget' => array(
            'weight' => '33',
            'type' => 'options_select',
            'module' => 'options',
            'active' => 1,
            'settings' => array(),
          ),
          'settings' => array(
            'user_register_form' => FALSE,
          ),
          'display' => array(
            'default' => array(
              'label' => 'above',
              'type' => 'taxonomy_term_reference_link',
              'settings' => array(),
              'module' => 'taxonomy',
              'weight' => 2,
            ),
            'teaser' => array(
              'type' => 'hidden',
              'label' => 'above',
              'settings' => array(),
              'weight' => 0,
            ),
          ),
          'required' => 0,
          'description' => '',
          'default_value' => array(
            0 => array(
              'tid' => '1',
            ),
          ),
          'field_name' => 'field_taxonomy',
          'entity_type' => 'node',
          'bundle' => 'harris_matrix',
          'deleted' => '0',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_install().
 */
function agile_harris_matrix_install() {
  // Create Vocabulary container.
  $matrix_vocabulary = taxonomy_vocabulary_machine_name_load('matrix_vocabularies');
  if (!$matrix_vocabulary) {
    $matrix_vocabulary = new stdClass();
    $matrix_vocabulary->name = 'Matrix Vocabularies';
    $matrix_vocabulary->machine_name = 'matrix_vocabularies';
    taxonomy_vocabulary_save($matrix_vocabulary);
  }

  // Create default vocabulary
  $default = taxonomy_vocabulary_machine_name_load('default_matrix_vocabulary');
  if (!$default) {
    $default = new stdClass();
    $default->name = 'Default Matrix Vocabulary';
    $default->machine_name = 'default_matrix_vocabulary';
    taxonomy_vocabulary_save($default);
    taxonomy_term_save((object) array(
          'name' => 'Default Matrix Vocabulary',
          'vid' => $matrix_vocabulary->vid,
    ));
  }

  // Add default terms
  $terms = array('PERIOD_GROUP', 'TOP_SURFACE', 'GEOLOGY', 'UNEXCAVATED', 'DEPOSIT');

  foreach ($terms as $term) {
    taxonomy_term_save((object) array(
          'name' => $term,
          'vid' => $default->vid,
    ));
  }

  $data = _agile_harris_matrix_get_data();
  if (isset($data) && is_array($data)) {
    $modules = module_list();
    $bc_info = bundle_copy_get_info();
    // Create bundles.
    foreach ($data['bundles'] as $key => $bundle) {
      $entity_type = '';
      if (is_object($bundle)) {
        $entity_type = $bundle->bc_entity_type;
      }
      elseif (is_array($bundle)) {
        $entity_type = $bundle['bc_entity_type'];
      }
      if (!empty($entity_type)) {
        $existing_bundles = _bundle_copy_bundle_info($entity_type);
        $bundle_save_callback = $bc_info[$entity_type]['bundle_save_callback'];
        $bundle_info = $bundle_save_callback($bundle);
        if (!isset($existing_bundles[$key])) {
          drupal_set_message(t('%bundle bundle has been created.', array('%bundle' => $bundle->name)));
        }
        else {
          drupal_set_message(t('%bundle bundle has been updated.', array('%bundle' => $bundle->name)));
        }
      }
    }

    // Create or update fields and their instances
    if (isset($data['fields'])) {
      foreach ($data['fields'] as $key => $field) {

        // Check if the field module exists.
        $module = $field['module'];
        if (!isset($modules[$module])) {
          drupal_set_message(t('%field_name field could not be created because the module %module is disabled or missing.', array('%field_name' => $key, '%module' => $module)), 'error');
          continue;
        }

        if (isset($data['instances'][$key])) {

          // Create or update field.
          $prior_field = field_read_field($field['field_name'], array('include_inactive' => TRUE));
          if (!$prior_field) {
            field_create_field($field);
            drupal_set_message(t('%field_name field has been created.', array('%field_name' => $key)));
          }
          else {
            $field['id'] = $prior_field['id'];
            field_update_field($field);
            drupal_set_message(t('%field_name field has been updated.', array('%field_name' => $key)));
          }

          // Create or update field instances.
          foreach ($data['instances'][$key] as $ikey => $instance) {

            // Make sure the needed key exists.
            if (!isset($instance['field_name'])) {
              continue;
            }

            $prior_instance = field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
            if (!$prior_instance) {
              field_create_instance($instance);
              drupal_set_message(t('%field_name instance has been created for @bundle in @entity_type.', array('%field_name' => $key, '@bundle' => $instance['bundle'], '@entity_type' => $instance['entity_type'])));
            }
            else {
              $instance['id'] = $prior_instance['id'];
              $instance['field_id'] = $prior_instance['field_id'];
              field_update_instance($instance);
              drupal_set_message(t('%field_name instance has been updated for @bundle in @entity_type.', array('%field_name' => $key, '@bundle' => $instance['bundle'], '@entity_type' => $instance['entity_type'])));
            }
          }
        }
      }
    }

    // Create / update fieldgroups.
    if (isset($data['fieldgroups'])) {
      if (module_exists('field_group')) {
        ctools_include('export');
        $existing_field_groups = field_group_info_groups();
        foreach ($data['fieldgroups'] as $identifier => $fieldgroup) {
          if (isset($existing_field_groups[$fieldgroup->entity_type][$fieldgroup->bundle][$fieldgroup->mode][$fieldgroup->group_name])) {
            $existing = $existing_field_groups[$fieldgroup->entity_type][$fieldgroup->bundle][$fieldgroup->mode][$fieldgroup->group_name];
            $fieldgroup->id = $existing->id;
            if (!isset($fieldgroup->disabled)) {
              $fieldgroup->disabled = FALSE;
            }
            ctools_export_crud_save('field_group', $fieldgroup);
            ctools_export_crud_set_status('field_group', $fieldgroup, $fieldgroup->disabled);
            drupal_set_message(t('%fieldgroup fieldgroup has been updated for @bundle in @entity_type.', array('%fieldgroup' => $fieldgroup->label, '@bundle' => $fieldgroup->bundle, '@entity_type' => $fieldgroup->entity_type)));
          }
          else {
            unset($fieldgroup->id);
            unset($fieldgroup->export_type);
            if (!isset($fieldgroup->disabled)) {
              $fieldgroup->disabled = FALSE;
            }
            ctools_export_crud_save('field_group', $fieldgroup);
            $fieldgroup->export_type = 1;
            ctools_export_crud_set_status('field_group', $fieldgroup, $fieldgroup->disabled);
            drupal_set_message(t('%fieldgroup fieldgroup has been saved for @bundle in @entity_type.', array('%fieldgroup' => $fieldgroup->label, '@bundle' => $fieldgroup->bundle, '@entity_type' => $fieldgroup->entity_type)));
          }
        }
      }
      else {
        drupal_set_message(t('The fieldgroups could not be saved because the <em>Field group</em> module is disabled or missing.'), 'error');
      }
    }

    // Clear caches.
    field_info_cache_clear();
    if (module_exists('field_group')) {
      cache_clear_all('field_groups', 'cache_field');
    }
  }
  else {
    drupal_set_message(t('The pasted text did not contain any valid export data.'), 'error');
  }
}
